{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Product API\nexport const productAPI = {\n  getAll: () => api.get('/api/products'),\n  getById: id => api.get(`/api/products/${id}`),\n  getByCategory: category => api.get(`/api/products/category/${category}`),\n  getByBrand: brand => api.get(`/api/products/brand/${brand}`),\n  search: keyword => api.get(`/api/products/search?keyword=${keyword}`),\n  getAvailable: () => api.get('/api/products/available'),\n  create: product => api.post('/api/products', product),\n  update: (id, product) => api.put(`/api/products/${id}`, product),\n  delete: id => api.delete(`/api/products/${id}`),\n  updateStock: (id, quantity) => api.put(`/api/products/${id}/stock?quantity=${quantity}`),\n  checkStock: (id, quantity) => api.get(`/api/products/${id}/stock/check?quantity=${quantity}`)\n};\n\n// User API\nexport const userAPI = {\n  register: userData => api.post('/api/users/register', userData),\n  login: credentials => api.post('/api/users/login', credentials),\n  getCurrent: () => api.get('/api/users/current'),\n  getById: id => api.get(`/api/users/${id}`),\n  getByUsername: username => api.get(`/api/users/username/${username}`),\n  getAll: () => api.get('/api/users'),\n  update: (id, userData) => api.put(`/api/users/${id}`, userData),\n  delete: id => api.delete(`/api/users/${id}`),\n  enable: id => api.put(`/api/users/${id}/enable`),\n  disable: id => api.put(`/api/users/${id}/disable`),\n  changeRole: (id, role) => api.put(`/api/users/${id}/role?role=${role}`),\n  validateToken: token => api.post('/api/users/validate-token', null, {\n    params: {\n      token\n    }\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","productAPI","getAll","get","getById","id","getByCategory","category","getByBrand","brand","search","keyword","getAvailable","product","post","update","put","delete","updateStock","quantity","checkStock","userAPI","register","userData","login","credentials","getCurrent","getByUsername","username","enable","disable","changeRole","role","validateToken","params"],"sources":["/Users/vaibhavsomkuwar/Desktop/resume-projects/ecommerce-platform/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Product, User, AuthResponse, LoginRequest, RegisterRequest } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Product API\nexport const productAPI = {\n  getAll: () => api.get<Product[]>('/api/products'),\n  getById: (id: number) => api.get<Product>(`/api/products/${id}`),\n  getByCategory: (category: string) => api.get<Product[]>(`/api/products/category/${category}`),\n  getByBrand: (brand: string) => api.get<Product[]>(`/api/products/brand/${brand}`),\n  search: (keyword: string) => api.get<Product[]>(`/api/products/search?keyword=${keyword}`),\n  getAvailable: () => api.get<Product[]>('/api/products/available'),\n  create: (product: Omit<Product, 'id' | 'createdAt' | 'updatedAt' | 'active'>) => \n    api.post<Product>('/api/products', product),\n  update: (id: number, product: Partial<Product>) => \n    api.put<Product>(`/api/products/${id}`, product),\n  delete: (id: number) => api.delete(`/api/products/${id}`),\n  updateStock: (id: number, quantity: number) => \n    api.put<boolean>(`/api/products/${id}/stock?quantity=${quantity}`),\n  checkStock: (id: number, quantity: number) => \n    api.get<boolean>(`/api/products/${id}/stock/check?quantity=${quantity}`),\n};\n\n// User API\nexport const userAPI = {\n  register: (userData: RegisterRequest) => api.post<AuthResponse>('/api/users/register', userData),\n  login: (credentials: LoginRequest) => api.post<AuthResponse>('/api/users/login', credentials),\n  getCurrent: () => api.get<User>('/api/users/current'),\n  getById: (id: number) => api.get<User>(`/api/users/${id}`),\n  getByUsername: (username: string) => api.get<User>(`/api/users/username/${username}`),\n  getAll: () => api.get<User[]>('/api/users'),\n  update: (id: number, userData: Partial<RegisterRequest>) => \n    api.put<User>(`/api/users/${id}`, userData),\n  delete: (id: number) => api.delete(`/api/users/${id}`),\n  enable: (id: number) => api.put(`/api/users/${id}/enable`),\n  disable: (id: number) => api.put(`/api/users/${id}/disable`),\n  changeRole: (id: number, role: string) => api.put(`/api/users/${id}/role?role=${role}`),\n  validateToken: (token: string) => api.post<boolean>('/api/users/validate-token', null, {\n    params: { token }\n  }),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}